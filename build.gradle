buildscript {
  ext {
    springBootVersion = '1.4.1.RELEASE'
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

apply plugin: 'war'
apply plugin: 'spring-boot'
apply plugin: 'idea'

project.ext {
  cxfVersion = "3.1.7"
  
  cxfArtifacts = [
      'cxf-rt-frontend-jaxws',
      'cxf-rt-frontend-jaxrs',
      'cxf-rt-transports-http',
      'cxf-rt-rs-client',
      'cxf-rt-rs-service-description',
  ]
}

repositories {
  maven { url "https://jitpack.io" }
  mavenCentral()
}

springBoot {
  mainClass = "com.bftcom.ws.WebServiceConfiguration"
}

dependencies {
  compile 'com.github.rubenlagus:TelegramBots:v2.3.5'
  compile 'com.ullink.slack:simpleslackapi:0.6.0'

  compile 'org.springframework.boot:spring-boot-starter-web'
  providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

  compile 'org.apache.httpcomponents:httpclient:4.5.2'
  compile 'com.google.code.gson:gson:2.7'

  cxfArtifacts.each { artifact ->
    compile "org.apache.cxf:$artifact:$cxfVersion"
  }
}

task copyConfigFiles(type: Copy) {
  from('./')
  into('build/libs')
  include(['serviceparams.xml', 'eliza.script'])
}

build.dependsOn copyConfigFiles

// New configuration for CXF dependencies.
configurations { cxfTool }
ext {
// Artifacts for CXF dependency.
  cxfToolArtifacts = [
          'cxf-tools-wsdlto-frontend-jaxws',
          'cxf-tools-wsdlto-databinding-jaxb',
          'cxf-tools-common',
          'cxf-tools-wsdlto-core'
  ]
}

dependencies {
  cxfToolArtifacts.each { artifact ->
    cxfTool "org.apache.cxf:$artifact:$cxfVersion"
  }
}

task wsdl2java(type: JavaExec) {
  ext {
    outputDir = file("$buildDir/generated/cxf")
  }
  outputs.upToDateWhen { false }
  outputs.dir outputDir
  main = 'org.apache.cxf.tools.wsdlto.WSDLToJava'
  classpath = configurations.cxfTool
  args '-d', outputDir
  args "-client"
  args '-verbose'
  args '-validate'
  args 'http://localhost:8080/MessengerProxyService/MessengerProxyService?wsdl'
  doLast {
    println "[INFO] Client files generated"
  }
}

task installPyLibs << {
  exec {
    commandLine 'pip', 'install', 'Django==1.10.1'
  }
  exec {
    commandLine 'pip', 'install', 'suds-jurko'
  }
}

task startPyGUI(type:Exec) {
  workingDir './GUI-django'
  commandLine 'python', 'manage.py', 'runserver'
}